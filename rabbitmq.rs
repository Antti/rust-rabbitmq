/* automatically generated by rust-bindgen */

use libc::*;
pub type __int128_t = c_void;
pub type __uint128_t = c_void;
pub type __builtin_va_list = [__va_list_tag, ..1u];
pub type __int8_t = c_schar;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_longlong;
pub type __uint64_t = c_ulonglong;
pub type __darwin_intptr_t = c_long;
pub type __darwin_natural_t = c_uint;
pub type __darwin_ct_rune_t = c_int;
pub struct __mbstate_t {
    pub data: [u64, ..16u],
}
impl __mbstate_t {
    pub fn __mbstate8(&mut self) -> *mut [c_schar, ..128u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn _mbstateL(&mut self) -> *mut c_longlong {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = c_long;
pub type __darwin_size_t = c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = c_int;
pub type __darwin_clock_t = c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = c_long;
pub type __darwin_time_t = c_long;
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<extern "C" fn(arg1: *mut c_void)>,
    pub __arg: *mut c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: c_long,
    pub __opaque: [c_schar, ..56u],
}
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: c_long,
    pub __opaque: [c_schar, ..40u],
}
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: c_long,
    pub __opaque: [c_schar, ..8u],
}
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: c_long,
    pub __opaque: [c_schar, ..56u],
}
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: c_long,
    pub __opaque: [c_schar, ..8u],
}
pub struct Struct__opaque_pthread_once_t {
    pub __sig: c_long,
    pub __opaque: [c_schar, ..8u],
}
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: c_long,
    pub __opaque: [c_schar, ..192u],
}
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: c_long,
    pub __opaque: [c_schar, ..16u],
}
pub struct Struct__opaque_pthread_t {
    pub __sig: c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [c_schar, ..1168u],
}
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = c_uint;
pub type __darwin_fsfilcnt_t = c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [c_uchar, ..16u];
pub type __darwin_uuid_string_t = [c_schar, ..37u];
pub type size_t = __darwin_size_t;
pub type ssize_t = __darwin_ssize_t;
pub struct Struct_iovec {
    pub iov_base: *mut c_void,
    pub iov_len: size_t,
}
pub type Enum_uio_rw = c_uint;
pub static UIO_READ: c_uint = 0;
pub static UIO_WRITE: c_uint = 1;
pub type ptrdiff_t = c_long;
pub type rsize_t = c_ulong;
pub type wchar_t = c_int;
pub type int8_t = c_schar;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_longlong;
pub type uint8_t = c_uchar;
pub type uint16_t = c_ushort;
pub type uint32_t = c_uint;
pub type uint64_t = c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = c_ulong;
pub type intmax_t = c_long;
pub type uintmax_t = c_ulong;
pub type amqp_boolean_t = c_int;
pub type amqp_method_number_t = uint32_t;
pub type amqp_flags_t = uint32_t;
pub type amqp_channel_t = uint16_t;
pub struct Struct_amqp_bytes_t_ {
    pub len: size_t,
    pub bytes: *mut c_void,
}
pub type amqp_bytes_t = Struct_amqp_bytes_t_;
pub struct Struct_amqp_decimal_t_ {
    pub decimals: uint8_t,
    pub value: uint32_t,
}
pub type amqp_decimal_t = Struct_amqp_decimal_t_;
pub struct Struct_amqp_table_t_ {
    pub num_entries: c_int,
    pub entries: *mut Struct_amqp_table_entry_t_,
}
pub type amqp_table_t = Struct_amqp_table_t_;
pub struct Struct_amqp_array_t_ {
    pub num_entries: c_int,
    pub entries: *mut Struct_amqp_field_value_t_,
}
pub type amqp_array_t = Struct_amqp_array_t_;
pub struct Struct_amqp_field_value_t_ {
    pub kind: uint8_t,
    pub value: Union_Unnamed1,
}
pub struct Union_Unnamed1 {
    pub data: [u64, ..2u],
}
impl Union_Unnamed1 {
    pub fn boolean(&mut self) -> *mut amqp_boolean_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn i8(&mut self) -> *mut int8_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn u8(&mut self) -> *mut uint8_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn i16(&mut self) -> *mut int16_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn u16(&mut self) -> *mut uint16_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn i32(&mut self) -> *mut int32_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn u32(&mut self) -> *mut uint32_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn i64(&mut self) -> *mut int64_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn u64(&mut self) -> *mut uint64_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn f32(&mut self) -> *mut c_float {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn f64(&mut self) -> *mut c_double {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn decimal(&mut self) -> *mut amqp_decimal_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn bytes(&mut self) -> *mut amqp_bytes_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn table(&mut self) -> *mut amqp_table_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn array(&mut self) -> *mut amqp_array_t {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub type amqp_field_value_t = Struct_amqp_field_value_t_;
pub struct Struct_amqp_table_entry_t_ {
    pub key: amqp_bytes_t,
    pub value: amqp_field_value_t,
}
pub type amqp_table_entry_t = Struct_amqp_table_entry_t_;
pub type amqp_field_value_kind_t = c_uint;
pub static AMQP_FIELD_KIND_BOOLEAN: c_uint = 116;
pub static AMQP_FIELD_KIND_I8: c_uint = 98;
pub static AMQP_FIELD_KIND_U8: c_uint = 66;
pub static AMQP_FIELD_KIND_I16: c_uint = 115;
pub static AMQP_FIELD_KIND_U16: c_uint = 117;
pub static AMQP_FIELD_KIND_I32: c_uint = 73;
pub static AMQP_FIELD_KIND_U32: c_uint = 105;
pub static AMQP_FIELD_KIND_I64: c_uint = 108;
pub static AMQP_FIELD_KIND_U64: c_uint = 76;
pub static AMQP_FIELD_KIND_F32: c_uint = 102;
pub static AMQP_FIELD_KIND_F64: c_uint = 100;
pub static AMQP_FIELD_KIND_DECIMAL: c_uint = 68;
pub static AMQP_FIELD_KIND_UTF8: c_uint = 83;
pub static AMQP_FIELD_KIND_ARRAY: c_uint = 65;
pub static AMQP_FIELD_KIND_TIMESTAMP: c_uint = 84;
pub static AMQP_FIELD_KIND_TABLE: c_uint = 70;
pub static AMQP_FIELD_KIND_VOID: c_uint = 86;
pub static AMQP_FIELD_KIND_BYTES: c_uint = 120;
pub struct Struct_amqp_pool_blocklist_t_ {
    pub num_blocks: c_int,
    pub blocklist: *mut *mut c_void,
}
pub type amqp_pool_blocklist_t = Struct_amqp_pool_blocklist_t_;
pub struct Struct_amqp_pool_t_ {
    pub pagesize: size_t,
    pub pages: amqp_pool_blocklist_t,
    pub large_blocks: amqp_pool_blocklist_t,
    pub next_page: c_int,
    pub alloc_block: *mut c_schar,
    pub alloc_used: size_t,
}
pub type amqp_pool_t = Struct_amqp_pool_t_;
#[deriving(Show)]
pub struct Struct_amqp_method_t_ {
    pub id: amqp_method_number_t,
    pub decoded: *mut c_void,
}
pub type amqp_method_t = Struct_amqp_method_t_;
pub struct Struct_amqp_frame_t_ {
    pub frame_type: uint8_t,
    pub channel: amqp_channel_t,
    pub payload: Union_Unnamed2,
}
pub struct Union_Unnamed2 {
    pub data: [u64, ..5u],
}
impl Union_Unnamed2 {
    pub fn method(&mut self) -> *mut amqp_method_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn properties(&mut self) -> *mut Struct_Unnamed3 {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn body_fragment(&mut self) -> *mut amqp_bytes_t {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn protocol_header(&mut self) -> *mut Struct_Unnamed4 {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct Struct_Unnamed3 {
    pub class_id: uint16_t,
    pub body_size: uint64_t,
    pub decoded: *mut c_void,
    pub raw: amqp_bytes_t,
}
pub struct Struct_Unnamed4 {
    pub transport_high: uint8_t,
    pub transport_low: uint8_t,
    pub protocol_version_major: uint8_t,
    pub protocol_version_minor: uint8_t,
}
pub type amqp_frame_t = Struct_amqp_frame_t_;
pub type Enum_amqp_response_type_enum_ = c_uint;
pub static AMQP_RESPONSE_NONE: c_uint = 0;
pub static AMQP_RESPONSE_NORMAL: c_uint = 1;
pub static AMQP_RESPONSE_LIBRARY_EXCEPTION: c_uint = 2;
pub static AMQP_RESPONSE_SERVER_EXCEPTION: c_uint = 3;
pub type amqp_response_type_enum = Enum_amqp_response_type_enum_;
#[deriving(Show)]
pub struct Struct_amqp_rpc_reply_t_ {
    pub reply_type: amqp_response_type_enum,
    pub reply: amqp_method_t,
    pub library_error: c_int,
}
pub type amqp_rpc_reply_t = Struct_amqp_rpc_reply_t_;
pub type Enum_amqp_sasl_method_enum_ = c_uint;
pub static AMQP_SASL_METHOD_PLAIN: c_uint = 0;
pub type amqp_sasl_method_enum = Enum_amqp_sasl_method_enum_;
pub type amqp_connection_state_t = *mut Struct_amqp_connection_state_t_;
pub type amqp_socket_t = Struct_amqp_socket_t_;
pub type Enum_amqp_status_enum_ = c_int;
pub static AMQP_STATUS_OK: c_int = 0;
pub static AMQP_STATUS_NO_MEMORY: c_int = -1;
pub static AMQP_STATUS_BAD_AMQP_DATA: c_int = -2;
pub static AMQP_STATUS_UNKNOWN_CLASS: c_int = -3;
pub static AMQP_STATUS_UNKNOWN_METHOD: c_int = -4;
pub static AMQP_STATUS_HOSTNAME_RESOLUTION_FAILED: c_int = -5;
pub static AMQP_STATUS_INCOMPATIBLE_AMQP_VERSION: c_int = -6;
pub static AMQP_STATUS_CONNECTION_CLOSED: c_int = -7;
pub static AMQP_STATUS_BAD_URL: c_int = -8;
pub static AMQP_STATUS_SOCKET_ERROR: c_int = -9;
pub static AMQP_STATUS_INVALID_PARAMETER: c_int = -10;
pub static AMQP_STATUS_TABLE_TOO_BIG: c_int = -11;
pub static AMQP_STATUS_WRONG_METHOD: c_int = -12;
pub static AMQP_STATUS_TIMEOUT: c_int = -13;
pub static AMQP_STATUS_TIMER_FAILURE: c_int = -14;
pub static AMQP_STATUS_HEARTBEAT_TIMEOUT: c_int = -15;
pub static AMQP_STATUS_UNEXPECTED_STATE: c_int = -16;
pub static AMQP_STATUS_TCP_ERROR: c_int = -256;
pub static AMQP_STATUS_TCP_SOCKETLIB_INIT_ERROR: c_int = -257;
pub static AMQP_STATUS_SSL_ERROR: c_int = -512;
pub static AMQP_STATUS_SSL_HOSTNAME_VERIFY_FAILED: c_int = -513;
pub static AMQP_STATUS_SSL_PEER_VERIFY_FAILED: c_int = -514;
pub static AMQP_STATUS_SSL_CONNECTION_FAILED: c_int = -515;
pub type amqp_status_enum = Enum_amqp_status_enum_;
pub type amqp_delivery_mode_enum = c_uint;
pub static AMQP_DELIVERY_NONPERSISTENT: c_uint = 1;
pub static AMQP_DELIVERY_PERSISTENT: c_uint = 2;
pub struct Struct_amqp_connection_start_t_ {
    pub version_major: uint8_t,
    pub version_minor: uint8_t,
    pub server_properties: amqp_table_t,
    pub mechanisms: amqp_bytes_t,
    pub locales: amqp_bytes_t,
}
pub type amqp_connection_start_t = Struct_amqp_connection_start_t_;
pub struct Struct_amqp_connection_start_ok_t_ {
    pub client_properties: amqp_table_t,
    pub mechanism: amqp_bytes_t,
    pub response: amqp_bytes_t,
    pub locale: amqp_bytes_t,
}
pub type amqp_connection_start_ok_t = Struct_amqp_connection_start_ok_t_;
pub struct Struct_amqp_connection_secure_t_ {
    pub challenge: amqp_bytes_t,
}
pub type amqp_connection_secure_t = Struct_amqp_connection_secure_t_;
pub struct Struct_amqp_connection_secure_ok_t_ {
    pub response: amqp_bytes_t,
}
pub type amqp_connection_secure_ok_t = Struct_amqp_connection_secure_ok_t_;
pub struct Struct_amqp_connection_tune_t_ {
    pub channel_max: uint16_t,
    pub frame_max: uint32_t,
    pub heartbeat: uint16_t,
}
pub type amqp_connection_tune_t = Struct_amqp_connection_tune_t_;
pub struct Struct_amqp_connection_tune_ok_t_ {
    pub channel_max: uint16_t,
    pub frame_max: uint32_t,
    pub heartbeat: uint16_t,
}
pub type amqp_connection_tune_ok_t = Struct_amqp_connection_tune_ok_t_;
pub struct Struct_amqp_connection_open_t_ {
    pub virtual_host: amqp_bytes_t,
    pub capabilities: amqp_bytes_t,
    pub insist: amqp_boolean_t,
}
pub type amqp_connection_open_t = Struct_amqp_connection_open_t_;
pub struct Struct_amqp_connection_open_ok_t_ {
    pub known_hosts: amqp_bytes_t,
}
pub type amqp_connection_open_ok_t = Struct_amqp_connection_open_ok_t_;
pub struct Struct_amqp_connection_close_t_ {
    pub reply_code: uint16_t,
    pub reply_text: amqp_bytes_t,
    pub class_id: uint16_t,
    pub method_id: uint16_t,
}
pub type amqp_connection_close_t = Struct_amqp_connection_close_t_;
pub struct Struct_amqp_connection_close_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_connection_close_ok_t = Struct_amqp_connection_close_ok_t_;
pub struct Struct_amqp_connection_blocked_t_ {
    pub reason: amqp_bytes_t,
}
pub type amqp_connection_blocked_t = Struct_amqp_connection_blocked_t_;
pub struct Struct_amqp_connection_unblocked_t_ {
    pub dummy: c_schar,
}
pub type amqp_connection_unblocked_t = Struct_amqp_connection_unblocked_t_;
pub struct Struct_amqp_channel_open_t_ {
    pub out_of_band: amqp_bytes_t,
}
pub type amqp_channel_open_t = Struct_amqp_channel_open_t_;
pub struct Struct_amqp_channel_open_ok_t_ {
    pub channel_id: amqp_bytes_t,
}
pub type amqp_channel_open_ok_t = Struct_amqp_channel_open_ok_t_;
pub struct Struct_amqp_channel_flow_t_ {
    pub active: amqp_boolean_t,
}
pub type amqp_channel_flow_t = Struct_amqp_channel_flow_t_;
pub struct Struct_amqp_channel_flow_ok_t_ {
    pub active: amqp_boolean_t,
}
pub type amqp_channel_flow_ok_t = Struct_amqp_channel_flow_ok_t_;
pub struct Struct_amqp_channel_close_t_ {
    pub reply_code: uint16_t,
    pub reply_text: amqp_bytes_t,
    pub class_id: uint16_t,
    pub method_id: uint16_t,
}
pub type amqp_channel_close_t = Struct_amqp_channel_close_t_;
pub struct Struct_amqp_channel_close_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_channel_close_ok_t = Struct_amqp_channel_close_ok_t_;
pub struct Struct_amqp_access_request_t_ {
    pub realm: amqp_bytes_t,
    pub exclusive: amqp_boolean_t,
    pub passive: amqp_boolean_t,
    pub active: amqp_boolean_t,
    pub write: amqp_boolean_t,
    pub read: amqp_boolean_t,
}
pub type amqp_access_request_t = Struct_amqp_access_request_t_;
pub struct Struct_amqp_access_request_ok_t_ {
    pub ticket: uint16_t,
}
pub type amqp_access_request_ok_t = Struct_amqp_access_request_ok_t_;
pub struct Struct_amqp_exchange_declare_t_ {
    pub ticket: uint16_t,
    pub exchange: amqp_bytes_t,
    pub _type: amqp_bytes_t,
    pub passive: amqp_boolean_t,
    pub durable: amqp_boolean_t,
    pub auto_delete: amqp_boolean_t,
    pub internal: amqp_boolean_t,
    pub nowait: amqp_boolean_t,
    pub arguments: amqp_table_t,
}
pub type amqp_exchange_declare_t = Struct_amqp_exchange_declare_t_;
pub struct Struct_amqp_exchange_declare_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_exchange_declare_ok_t = Struct_amqp_exchange_declare_ok_t_;
pub struct Struct_amqp_exchange_delete_t_ {
    pub ticket: uint16_t,
    pub exchange: amqp_bytes_t,
    pub if_unused: amqp_boolean_t,
    pub nowait: amqp_boolean_t,
}
pub type amqp_exchange_delete_t = Struct_amqp_exchange_delete_t_;
pub struct Struct_amqp_exchange_delete_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_exchange_delete_ok_t = Struct_amqp_exchange_delete_ok_t_;
pub struct Struct_amqp_exchange_bind_t_ {
    pub ticket: uint16_t,
    pub destination: amqp_bytes_t,
    pub source: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
    pub nowait: amqp_boolean_t,
    pub arguments: amqp_table_t,
}
pub type amqp_exchange_bind_t = Struct_amqp_exchange_bind_t_;
pub struct Struct_amqp_exchange_bind_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_exchange_bind_ok_t = Struct_amqp_exchange_bind_ok_t_;
pub struct Struct_amqp_exchange_unbind_t_ {
    pub ticket: uint16_t,
    pub destination: amqp_bytes_t,
    pub source: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
    pub nowait: amqp_boolean_t,
    pub arguments: amqp_table_t,
}
pub type amqp_exchange_unbind_t = Struct_amqp_exchange_unbind_t_;
pub struct Struct_amqp_exchange_unbind_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_exchange_unbind_ok_t = Struct_amqp_exchange_unbind_ok_t_;
pub struct Struct_amqp_queue_declare_t_ {
    pub ticket: uint16_t,
    pub queue: amqp_bytes_t,
    pub passive: amqp_boolean_t,
    pub durable: amqp_boolean_t,
    pub exclusive: amqp_boolean_t,
    pub auto_delete: amqp_boolean_t,
    pub nowait: amqp_boolean_t,
    pub arguments: amqp_table_t,
}
pub type amqp_queue_declare_t = Struct_amqp_queue_declare_t_;
pub struct Struct_amqp_queue_declare_ok_t_ {
    pub queue: amqp_bytes_t,
    pub message_count: uint32_t,
    pub consumer_count: uint32_t,
}
pub type amqp_queue_declare_ok_t = Struct_amqp_queue_declare_ok_t_;
pub struct Struct_amqp_queue_bind_t_ {
    pub ticket: uint16_t,
    pub queue: amqp_bytes_t,
    pub exchange: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
    pub nowait: amqp_boolean_t,
    pub arguments: amqp_table_t,
}
pub type amqp_queue_bind_t = Struct_amqp_queue_bind_t_;
pub struct Struct_amqp_queue_bind_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_queue_bind_ok_t = Struct_amqp_queue_bind_ok_t_;
pub struct Struct_amqp_queue_purge_t_ {
    pub ticket: uint16_t,
    pub queue: amqp_bytes_t,
    pub nowait: amqp_boolean_t,
}
pub type amqp_queue_purge_t = Struct_amqp_queue_purge_t_;
pub struct Struct_amqp_queue_purge_ok_t_ {
    pub message_count: uint32_t,
}
pub type amqp_queue_purge_ok_t = Struct_amqp_queue_purge_ok_t_;
pub struct Struct_amqp_queue_delete_t_ {
    pub ticket: uint16_t,
    pub queue: amqp_bytes_t,
    pub if_unused: amqp_boolean_t,
    pub if_empty: amqp_boolean_t,
    pub nowait: amqp_boolean_t,
}
pub type amqp_queue_delete_t = Struct_amqp_queue_delete_t_;
pub struct Struct_amqp_queue_delete_ok_t_ {
    pub message_count: uint32_t,
}
pub type amqp_queue_delete_ok_t = Struct_amqp_queue_delete_ok_t_;
pub struct Struct_amqp_queue_unbind_t_ {
    pub ticket: uint16_t,
    pub queue: amqp_bytes_t,
    pub exchange: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
    pub arguments: amqp_table_t,
}
pub type amqp_queue_unbind_t = Struct_amqp_queue_unbind_t_;
pub struct Struct_amqp_queue_unbind_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_queue_unbind_ok_t = Struct_amqp_queue_unbind_ok_t_;
pub struct Struct_amqp_basic_qos_t_ {
    pub prefetch_size: uint32_t,
    pub prefetch_count: uint16_t,
    pub global: amqp_boolean_t,
}
pub type amqp_basic_qos_t = Struct_amqp_basic_qos_t_;
pub struct Struct_amqp_basic_qos_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_basic_qos_ok_t = Struct_amqp_basic_qos_ok_t_;
pub struct Struct_amqp_basic_consume_t_ {
    pub ticket: uint16_t,
    pub queue: amqp_bytes_t,
    pub consumer_tag: amqp_bytes_t,
    pub no_local: amqp_boolean_t,
    pub no_ack: amqp_boolean_t,
    pub exclusive: amqp_boolean_t,
    pub nowait: amqp_boolean_t,
    pub arguments: amqp_table_t,
}
pub type amqp_basic_consume_t = Struct_amqp_basic_consume_t_;
pub struct Struct_amqp_basic_consume_ok_t_ {
    pub consumer_tag: amqp_bytes_t,
}
pub type amqp_basic_consume_ok_t = Struct_amqp_basic_consume_ok_t_;
pub struct Struct_amqp_basic_cancel_t_ {
    pub consumer_tag: amqp_bytes_t,
    pub nowait: amqp_boolean_t,
}
pub type amqp_basic_cancel_t = Struct_amqp_basic_cancel_t_;
pub struct Struct_amqp_basic_cancel_ok_t_ {
    pub consumer_tag: amqp_bytes_t,
}
pub type amqp_basic_cancel_ok_t = Struct_amqp_basic_cancel_ok_t_;
pub struct Struct_amqp_basic_publish_t_ {
    pub ticket: uint16_t,
    pub exchange: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
    pub mandatory: amqp_boolean_t,
    pub immediate: amqp_boolean_t,
}
pub type amqp_basic_publish_t = Struct_amqp_basic_publish_t_;
pub struct Struct_amqp_basic_return_t_ {
    pub reply_code: uint16_t,
    pub reply_text: amqp_bytes_t,
    pub exchange: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
}
pub type amqp_basic_return_t = Struct_amqp_basic_return_t_;
pub struct Struct_amqp_basic_deliver_t_ {
    pub consumer_tag: amqp_bytes_t,
    pub delivery_tag: uint64_t,
    pub redelivered: amqp_boolean_t,
    pub exchange: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
}
pub type amqp_basic_deliver_t = Struct_amqp_basic_deliver_t_;
pub struct Struct_amqp_basic_get_t_ {
    pub ticket: uint16_t,
    pub queue: amqp_bytes_t,
    pub no_ack: amqp_boolean_t,
}
pub type amqp_basic_get_t = Struct_amqp_basic_get_t_;
pub struct Struct_amqp_basic_get_ok_t_ {
    pub delivery_tag: uint64_t,
    pub redelivered: amqp_boolean_t,
    pub exchange: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
    pub message_count: uint32_t,
}
pub type amqp_basic_get_ok_t = Struct_amqp_basic_get_ok_t_;
pub struct Struct_amqp_basic_get_empty_t_ {
    pub cluster_id: amqp_bytes_t,
}
pub type amqp_basic_get_empty_t = Struct_amqp_basic_get_empty_t_;
pub struct Struct_amqp_basic_ack_t_ {
    pub delivery_tag: uint64_t,
    pub multiple: amqp_boolean_t,
}
pub type amqp_basic_ack_t = Struct_amqp_basic_ack_t_;
pub struct Struct_amqp_basic_reject_t_ {
    pub delivery_tag: uint64_t,
    pub requeue: amqp_boolean_t,
}
pub type amqp_basic_reject_t = Struct_amqp_basic_reject_t_;
pub struct Struct_amqp_basic_recover_async_t_ {
    pub requeue: amqp_boolean_t,
}
pub type amqp_basic_recover_async_t = Struct_amqp_basic_recover_async_t_;
pub struct Struct_amqp_basic_recover_t_ {
    pub requeue: amqp_boolean_t,
}
pub type amqp_basic_recover_t = Struct_amqp_basic_recover_t_;
pub struct Struct_amqp_basic_recover_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_basic_recover_ok_t = Struct_amqp_basic_recover_ok_t_;
pub struct Struct_amqp_basic_nack_t_ {
    pub delivery_tag: uint64_t,
    pub multiple: amqp_boolean_t,
    pub requeue: amqp_boolean_t,
}
pub type amqp_basic_nack_t = Struct_amqp_basic_nack_t_;
pub struct Struct_amqp_tx_select_t_ {
    pub dummy: c_schar,
}
pub type amqp_tx_select_t = Struct_amqp_tx_select_t_;
pub struct Struct_amqp_tx_select_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_tx_select_ok_t = Struct_amqp_tx_select_ok_t_;
pub struct Struct_amqp_tx_commit_t_ {
    pub dummy: c_schar,
}
pub type amqp_tx_commit_t = Struct_amqp_tx_commit_t_;
pub struct Struct_amqp_tx_commit_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_tx_commit_ok_t = Struct_amqp_tx_commit_ok_t_;
pub struct Struct_amqp_tx_rollback_t_ {
    pub dummy: c_schar,
}
pub type amqp_tx_rollback_t = Struct_amqp_tx_rollback_t_;
pub struct Struct_amqp_tx_rollback_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_tx_rollback_ok_t = Struct_amqp_tx_rollback_ok_t_;
pub struct Struct_amqp_confirm_select_t_ {
    pub nowait: amqp_boolean_t,
}
pub type amqp_confirm_select_t = Struct_amqp_confirm_select_t_;
pub struct Struct_amqp_confirm_select_ok_t_ {
    pub dummy: c_schar,
}
pub type amqp_confirm_select_ok_t = Struct_amqp_confirm_select_ok_t_;
pub struct Struct_amqp_connection_properties_t_ {
    pub _flags: amqp_flags_t,
    pub dummy: c_schar,
}
pub type amqp_connection_properties_t = Struct_amqp_connection_properties_t_;
pub struct Struct_amqp_channel_properties_t_ {
    pub _flags: amqp_flags_t,
    pub dummy: c_schar,
}
pub type amqp_channel_properties_t = Struct_amqp_channel_properties_t_;
pub struct Struct_amqp_access_properties_t_ {
    pub _flags: amqp_flags_t,
    pub dummy: c_schar,
}
pub type amqp_access_properties_t = Struct_amqp_access_properties_t_;
pub struct Struct_amqp_exchange_properties_t_ {
    pub _flags: amqp_flags_t,
    pub dummy: c_schar,
}
pub type amqp_exchange_properties_t = Struct_amqp_exchange_properties_t_;
pub struct Struct_amqp_queue_properties_t_ {
    pub _flags: amqp_flags_t,
    pub dummy: c_schar,
}
pub type amqp_queue_properties_t = Struct_amqp_queue_properties_t_;
pub struct Struct_amqp_basic_properties_t_ {
    pub _flags: amqp_flags_t,
    pub content_type: amqp_bytes_t,
    pub content_encoding: amqp_bytes_t,
    pub headers: amqp_table_t,
    pub delivery_mode: uint8_t,
    pub priority: uint8_t,
    pub correlation_id: amqp_bytes_t,
    pub reply_to: amqp_bytes_t,
    pub expiration: amqp_bytes_t,
    pub message_id: amqp_bytes_t,
    pub timestamp: uint64_t,
    pub _type: amqp_bytes_t,
    pub user_id: amqp_bytes_t,
    pub app_id: amqp_bytes_t,
    pub cluster_id: amqp_bytes_t,
}
pub type amqp_basic_properties_t = Struct_amqp_basic_properties_t_;
pub struct Struct_amqp_tx_properties_t_ {
    pub _flags: amqp_flags_t,
    pub dummy: c_schar,
}
pub type amqp_tx_properties_t = Struct_amqp_tx_properties_t_;
pub struct Struct_amqp_confirm_properties_t_ {
    pub _flags: amqp_flags_t,
    pub dummy: c_schar,
}
pub type amqp_confirm_properties_t = Struct_amqp_confirm_properties_t_;
pub struct Struct_amqp_message_t_ {
    pub properties: amqp_basic_properties_t,
    pub body: amqp_bytes_t,
    pub pool: amqp_pool_t,
}
pub type amqp_message_t = Struct_amqp_message_t_;
pub struct Struct_amqp_envelope_t_ {
    pub channel: amqp_channel_t,
    pub consumer_tag: amqp_bytes_t,
    pub delivery_tag: uint64_t,
    pub redelivered: amqp_boolean_t,
    pub exchange: amqp_bytes_t,
    pub routing_key: amqp_bytes_t,
    pub message: amqp_message_t,
}
pub type amqp_envelope_t = Struct_amqp_envelope_t_;
pub struct Struct_amqp_connection_info {
    pub user: *mut c_schar,
    pub password: *mut c_schar,
    pub host: *mut c_schar,
    pub vhost: *mut c_schar,
    pub port: c_int,
    pub ssl: amqp_boolean_t,
}
pub type __darwin_nl_item = c_int;
pub type __darwin_wctrans_t = c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type errno_t = c_int;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type u_int8_t = c_uchar;
pub type u_int16_t = c_ushort;
pub type u_int32_t = c_uint;
pub type u_int64_t = c_ulonglong;
pub type register_t = int64_t;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type u_char = c_uchar;
pub type u_short = c_ushort;
pub type u_int = c_uint;
pub type u_long = c_ulong;
pub type ushort = c_ushort;
pub type _uint = c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut c_schar;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t, ..32u],
}
pub type fd_set = Struct_fd_set;
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
pub struct Struct_linger {
    pub l_onoff: c_int,
    pub l_linger: c_int,
}
pub struct Struct_so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
pub struct Struct_sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [c_schar, ..14u],
}
pub struct Struct_sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
pub struct Struct_sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [c_schar, ..6u],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [c_schar, ..112u],
}
pub struct Struct_msghdr {
    pub msg_name: *mut c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut Struct_iovec,
    pub msg_iovlen: c_int,
    pub msg_control: *mut c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: c_int,
}
pub struct Struct_cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: c_int,
    pub cmsg_type: c_int,
}
pub struct Struct_sf_hdtr {
    pub headers: *mut Struct_iovec,
    pub hdr_cnt: c_int,
    pub trailers: *mut Struct_iovec,
    pub trl_cnt: c_int,
}
pub struct Struct_in_addr {
    pub s_addr: in_addr_t,
}
pub struct Struct_sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: Struct_in_addr,
    pub sin_zero: [c_schar, ..8u],
}
pub struct Struct_ip_opts {
    pub ip_dst: Struct_in_addr,
    pub ip_opts: [c_schar, ..40u],
}
pub struct Struct_ip_mreq {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
pub struct Struct_ip_mreqn {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_address: Struct_in_addr,
    pub imr_ifindex: c_int,
}
pub struct Struct_ip_mreq_source {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_sourceaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
pub struct Struct_group_req {
    pub gr_interface: uint32_t,
    pub gr_group: Struct_sockaddr_storage,
}
pub struct Struct_group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: Struct_sockaddr_storage,
    pub gsr_source: Struct_sockaddr_storage,
}
pub struct Struct___msfilterreq {
    pub msfr_ifindex: uint32_t,
    pub msfr_fmode: uint32_t,
    pub msfr_nsrcs: uint32_t,
    pub __msfr_align: uint32_t,
    pub msfr_group: Struct_sockaddr_storage,
    pub msfr_srcs: *mut Struct_sockaddr_storage,
}
pub struct Struct_in_pktinfo {
    pub ipi_ifindex: c_uint,
    pub ipi_spec_dst: Struct_in_addr,
    pub ipi_addr: Struct_in_addr,
}
pub struct Struct_in6_addr {
    pub __u6_addr: Union_Unnamed5,
}
pub struct Union_Unnamed5 {
    pub data: [u32, ..4u],
}
impl Union_Unnamed5 {
    pub fn __u6_addr8(&mut self) -> *mut [__uint8_t, ..16u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __u6_addr16(&mut self) -> *mut [__uint16_t, ..8u] {
        unsafe { ::std::cast::transmute(self) }
    }
    pub fn __u6_addr32(&mut self) -> *mut [__uint32_t, ..4u] {
        unsafe { ::std::cast::transmute(self) }
    }
}
pub struct Struct_sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: Struct_in6_addr,
    pub sin6_scope_id: __uint32_t,
}
pub struct Struct_ipv6_mreq {
    pub ipv6mr_multiaddr: Struct_in6_addr,
    pub ipv6mr_interface: c_uint,
}
pub struct Struct_in6_pktinfo {
    pub ipi6_addr: Struct_in6_addr,
    pub ipi6_ifindex: c_uint,
}
pub struct Struct_ip6_mtuinfo {
    pub ip6m_addr: Struct_sockaddr_in6,
    pub ip6m_mtu: uint32_t,
}
pub type amqp_socket_writev_fn =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: *mut Struct_iovec,
                               arg3: c_int) -> ssize_t>;
pub type amqp_socket_send_fn =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: *c_void, arg3: size_t)
                              -> ssize_t>;
pub type amqp_socket_recv_fn =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: *mut c_void,
                               arg3: size_t, arg4: c_int) -> ssize_t>;
pub type amqp_socket_open_fn =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut c_void, arg2: *c_schar, arg3: c_int,
                               arg4: *mut Struct_timeval) -> c_int>;
pub type amqp_socket_close_fn =
    ::std::option::Option<extern "C" fn(arg1: *mut c_void) -> c_int>;
pub type amqp_socket_get_sockfd_fn =
    ::std::option::Option<extern "C" fn(arg1: *mut c_void) -> c_int>;
pub type amqp_socket_delete_fn =
    ::std::option::Option<extern "C" fn(arg1: *mut c_void)>;
pub struct Struct_amqp_socket_class_t {
    pub writev: amqp_socket_writev_fn,
    pub send: amqp_socket_send_fn,
    pub recv: amqp_socket_recv_fn,
    pub open: amqp_socket_open_fn,
    pub close: amqp_socket_close_fn,
    pub get_sockfd: amqp_socket_get_sockfd_fn,
    pub delete: amqp_socket_delete_fn,
}
pub struct Struct_amqp_socket_t_ {
    pub klass: *Struct_amqp_socket_class_t,
}
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: c_long,
}
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
pub struct Struct_timezone {
    pub tz_minuteswest: c_int,
    pub tz_dsttime: c_int,
}
pub struct Struct_clockinfo {
    pub hz: c_int,
    pub tick: c_int,
    pub tickadj: c_int,
    pub stathz: c_int,
    pub profhz: c_int,
}
pub struct Struct_tm {
    pub tm_sec: c_int,
    pub tm_min: c_int,
    pub tm_hour: c_int,
    pub tm_mday: c_int,
    pub tm_mon: c_int,
    pub tm_year: c_int,
    pub tm_wday: c_int,
    pub tm_yday: c_int,
    pub tm_isdst: c_int,
    pub tm_gmtoff: c_long,
    pub tm_zone: *mut c_schar,
}
pub struct Struct_amqp_timer_t_ {
    pub current_timestamp: uint64_t,
    pub timeout_timestamp: uint64_t,
    pub ns_until_next_timeout: uint64_t,
    pub tv: Struct_timeval,
}
pub type amqp_timer_t = Struct_amqp_timer_t_;
pub type Enum_amqp_connection_state_enum_ = c_uint;
pub static CONNECTION_STATE_IDLE: c_uint = 0;
pub static CONNECTION_STATE_INITIAL: c_uint = 1;
pub static CONNECTION_STATE_HEADER: c_uint = 2;
pub static CONNECTION_STATE_BODY: c_uint = 3;
pub type amqp_connection_state_enum = Enum_amqp_connection_state_enum_;
pub struct Struct_amqp_link_t_ {
    pub next: *mut Struct_amqp_link_t_,
    pub data: *mut c_void,
}
pub type amqp_link_t = Struct_amqp_link_t_;
pub struct Struct_amqp_pool_table_entry_t_ {
    pub next: *mut Struct_amqp_pool_table_entry_t_,
    pub pool: amqp_pool_t,
    pub channel: amqp_channel_t,
}
pub type amqp_pool_table_entry_t = Struct_amqp_pool_table_entry_t_;
pub struct Struct_amqp_connection_state_t_ {
    pub pool_table: [*mut amqp_pool_table_entry_t, ..16u],
    pub state: amqp_connection_state_enum,
    pub channel_max: c_int,
    pub frame_max: c_int,
    pub heartbeat: c_int,
    pub header_buffer: [c_schar, ..8u],
    pub inbound_buffer: amqp_bytes_t,
    pub inbound_offset: size_t,
    pub target_size: size_t,
    pub outbound_buffer: amqp_bytes_t,
    pub socket: *mut amqp_socket_t,
    pub sock_inbound_buffer: amqp_bytes_t,
    pub sock_inbound_offset: size_t,
    pub sock_inbound_limit: size_t,
    pub first_queued_frame: *mut amqp_link_t,
    pub last_queued_frame: *mut amqp_link_t,
    pub most_recent_api_result: amqp_rpc_reply_t,
    pub next_recv_heartbeat: uint64_t,
    pub next_send_heartbeat: uint64_t,
    pub server_properties: amqp_table_t,
    pub properties_pool: amqp_pool_t,
}
pub type __va_list_tag = Struct___va_list_tag;
pub struct Struct___va_list_tag {
    pub gp_offset: c_uint,
    pub fp_offset: c_uint,
    pub overflow_arg_area: *mut c_void,
    pub reg_save_area: *mut c_void,
}
#[link(name = "rabbitmq")]
extern "C" {
    pub static amqp_empty_bytes: amqp_bytes_t;
    pub static amqp_empty_table: amqp_table_t;
    pub static amqp_empty_array: amqp_array_t;
    pub static in6addr_any: Struct_in6_addr;
    pub static in6addr_loopback: Struct_in6_addr;
    pub static in6addr_nodelocal_allnodes: Struct_in6_addr;
    pub static in6addr_linklocal_allnodes: Struct_in6_addr;
    pub static in6addr_linklocal_allrouters: Struct_in6_addr;
    pub static in6addr_linklocal_allv2routers: Struct_in6_addr;
    pub static mut tzname: c_void;
    pub static mut getdate_err: c_int;
    pub static mut timezone: c_long;
    pub static mut daylight: c_int;
    pub fn readv(arg1: c_int, arg2: *Struct_iovec, arg3: c_int) -> ssize_t;
    pub fn writev(arg1: c_int, arg2: *Struct_iovec, arg3: c_int) -> ssize_t;
    pub fn amqp_version_number() -> uint32_t;
    pub fn amqp_version() -> *c_schar;
    pub fn amqp_constant_name(constantNumber: c_int) -> *c_schar;
    pub fn amqp_constant_is_hard_error(constantNumber: c_int) ->
     amqp_boolean_t;
    pub fn amqp_method_name(methodNumber: amqp_method_number_t) -> *c_schar;
    pub fn amqp_method_has_content(methodNumber: amqp_method_number_t) ->
     amqp_boolean_t;
    pub fn amqp_decode_method(methodNumber: amqp_method_number_t,
                              pool: *mut amqp_pool_t, encoded: amqp_bytes_t,
                              decoded: *mut *mut c_void) -> c_int;
    pub fn amqp_decode_properties(class_id: uint16_t, pool: *mut amqp_pool_t,
                                  encoded: amqp_bytes_t,
                                  decoded: *mut *mut c_void) -> c_int;
    pub fn amqp_encode_method(methodNumber: amqp_method_number_t,
                              decoded: *mut c_void, encoded: amqp_bytes_t) ->
     c_int;
    pub fn amqp_encode_properties(class_id: uint16_t, decoded: *mut c_void,
                                  encoded: amqp_bytes_t) -> c_int;
    pub fn amqp_channel_open(state: amqp_connection_state_t,
                             channel: amqp_channel_t) ->
     *mut amqp_channel_open_ok_t;
    pub fn amqp_channel_flow(state: amqp_connection_state_t,
                             channel: amqp_channel_t, active: amqp_boolean_t)
     -> *mut amqp_channel_flow_ok_t;
    pub fn amqp_exchange_declare(state: amqp_connection_state_t,
                                 channel: amqp_channel_t,
                                 exchange: amqp_bytes_t, _type: amqp_bytes_t,
                                 passive: amqp_boolean_t,
                                 durable: amqp_boolean_t,
                                 arguments: amqp_table_t) ->
     *mut amqp_exchange_declare_ok_t;
    pub fn amqp_exchange_delete(state: amqp_connection_state_t,
                                channel: amqp_channel_t,
                                exchange: amqp_bytes_t,
                                if_unused: amqp_boolean_t) ->
     *mut amqp_exchange_delete_ok_t;
    pub fn amqp_exchange_bind(state: amqp_connection_state_t,
                              channel: amqp_channel_t,
                              destination: amqp_bytes_t, source: amqp_bytes_t,
                              routing_key: amqp_bytes_t,
                              arguments: amqp_table_t) ->
     *mut amqp_exchange_bind_ok_t;
    pub fn amqp_exchange_unbind(state: amqp_connection_state_t,
                                channel: amqp_channel_t,
                                destination: amqp_bytes_t,
                                source: amqp_bytes_t,
                                routing_key: amqp_bytes_t,
                                arguments: amqp_table_t) ->
     *mut amqp_exchange_unbind_ok_t;
    pub fn amqp_queue_declare(state: amqp_connection_state_t,
                              channel: amqp_channel_t, queue: amqp_bytes_t,
                              passive: amqp_boolean_t,
                              durable: amqp_boolean_t,
                              exclusive: amqp_boolean_t,
                              auto_delete: amqp_boolean_t,
                              arguments: amqp_table_t) ->
     *mut amqp_queue_declare_ok_t;
    pub fn amqp_queue_bind(state: amqp_connection_state_t,
                           channel: amqp_channel_t, queue: amqp_bytes_t,
                           exchange: amqp_bytes_t, routing_key: amqp_bytes_t,
                           arguments: amqp_table_t) ->
     *mut amqp_queue_bind_ok_t;
    pub fn amqp_queue_purge(state: amqp_connection_state_t,
                            channel: amqp_channel_t, queue: amqp_bytes_t) ->
     *mut amqp_queue_purge_ok_t;
    pub fn amqp_queue_delete(state: amqp_connection_state_t,
                             channel: amqp_channel_t, queue: amqp_bytes_t,
                             if_unused: amqp_boolean_t,
                             if_empty: amqp_boolean_t) ->
     *mut amqp_queue_delete_ok_t;
    pub fn amqp_queue_unbind(state: amqp_connection_state_t,
                             channel: amqp_channel_t, queue: amqp_bytes_t,
                             exchange: amqp_bytes_t,
                             routing_key: amqp_bytes_t,
                             arguments: amqp_table_t) ->
     *mut amqp_queue_unbind_ok_t;
    pub fn amqp_basic_qos(state: amqp_connection_state_t,
                          channel: amqp_channel_t, prefetch_size: uint32_t,
                          prefetch_count: uint16_t, global: amqp_boolean_t) ->
     *mut amqp_basic_qos_ok_t;
    pub fn amqp_basic_consume(state: amqp_connection_state_t,
                              channel: amqp_channel_t, queue: amqp_bytes_t,
                              consumer_tag: amqp_bytes_t,
                              no_local: amqp_boolean_t,
                              no_ack: amqp_boolean_t,
                              exclusive: amqp_boolean_t,
                              arguments: amqp_table_t) ->
     *mut amqp_basic_consume_ok_t;
    pub fn amqp_basic_cancel(state: amqp_connection_state_t,
                             channel: amqp_channel_t,
                             consumer_tag: amqp_bytes_t) ->
     *mut amqp_basic_cancel_ok_t;
    pub fn amqp_basic_recover(state: amqp_connection_state_t,
                              channel: amqp_channel_t,
                              requeue: amqp_boolean_t) ->
     *mut amqp_basic_recover_ok_t;
    pub fn amqp_tx_select(state: amqp_connection_state_t,
                          channel: amqp_channel_t) ->
     *mut amqp_tx_select_ok_t;
    pub fn amqp_tx_commit(state: amqp_connection_state_t,
                          channel: amqp_channel_t) ->
     *mut amqp_tx_commit_ok_t;
    pub fn amqp_tx_rollback(state: amqp_connection_state_t,
                            channel: amqp_channel_t) ->
     *mut amqp_tx_rollback_ok_t;
    pub fn amqp_confirm_select(state: amqp_connection_state_t,
                               channel: amqp_channel_t) ->
     *mut amqp_confirm_select_ok_t;
    pub fn init_amqp_pool(pool: *mut amqp_pool_t, pagesize: size_t);
    pub fn recycle_amqp_pool(pool: *mut amqp_pool_t);
    pub fn empty_amqp_pool(pool: *mut amqp_pool_t);
    pub fn amqp_pool_alloc(pool: *mut amqp_pool_t, amount: size_t) ->
     *mut c_void;
    pub fn amqp_pool_alloc_bytes(pool: *mut amqp_pool_t, amount: size_t,
                                 output: *mut amqp_bytes_t);
    pub fn amqp_cstring_bytes(cstr: *c_schar) -> amqp_bytes_t;
    pub fn amqp_bytes_malloc_dup(src: amqp_bytes_t) -> amqp_bytes_t;
    pub fn amqp_bytes_malloc(amount: size_t) -> amqp_bytes_t;
    pub fn amqp_bytes_free(bytes: amqp_bytes_t);
    pub fn amqp_new_connection() -> amqp_connection_state_t;
    pub fn amqp_get_sockfd(state: amqp_connection_state_t) -> c_int;
    pub fn amqp_set_sockfd(state: amqp_connection_state_t, sockfd: c_int);
    pub fn amqp_tune_connection(state: amqp_connection_state_t,
                                channel_max: c_int, frame_max: c_int,
                                heartbeat: c_int) -> c_int;
    pub fn amqp_get_channel_max(state: amqp_connection_state_t) -> c_int;
    pub fn amqp_destroy_connection(state: amqp_connection_state_t) -> c_int;
    pub fn amqp_handle_input(state: amqp_connection_state_t,
                             received_data: amqp_bytes_t,
                             decoded_frame: *mut amqp_frame_t) -> c_int;
    pub fn amqp_release_buffers_ok(state: amqp_connection_state_t) ->
     amqp_boolean_t;
    pub fn amqp_release_buffers(state: amqp_connection_state_t);
    pub fn amqp_maybe_release_buffers(state: amqp_connection_state_t);
    pub fn amqp_maybe_release_buffers_on_channel(state:
                                                     amqp_connection_state_t,
                                                 channel: amqp_channel_t);
    pub fn amqp_send_frame(state: amqp_connection_state_t,
                           frame: *amqp_frame_t) -> c_int;
    pub fn amqp_table_entry_cmp(entry1: *c_void, entry2: *c_void) -> c_int;
    pub fn amqp_open_socket(hostname: *c_schar, portnumber: c_int) -> c_int;
    pub fn amqp_send_header(state: amqp_connection_state_t) -> c_int;
    pub fn amqp_frames_enqueued(state: amqp_connection_state_t) ->
     amqp_boolean_t;
    pub fn amqp_simple_wait_frame(state: amqp_connection_state_t,
                                  decoded_frame: *mut amqp_frame_t) -> c_int;
    pub fn amqp_simple_wait_frame_noblock(state: amqp_connection_state_t,
                                          decoded_frame: *mut amqp_frame_t,
                                          tv: *mut Struct_timeval) -> c_int;
    pub fn amqp_simple_wait_method(state: amqp_connection_state_t,
                                   expected_channel: amqp_channel_t,
                                   expected_method: amqp_method_number_t,
                                   output: *mut amqp_method_t) -> c_int;
    pub fn amqp_send_method(state: amqp_connection_state_t,
                            channel: amqp_channel_t, id: amqp_method_number_t,
                            decoded: *mut c_void) -> c_int;
    pub fn amqp_simple_rpc(state: amqp_connection_state_t,
                           channel: amqp_channel_t,
                           request_id: amqp_method_number_t,
                           expected_reply_ids: *mut amqp_method_number_t,
                           decoded_request_method: *mut c_void) ->
     amqp_rpc_reply_t;
    pub fn amqp_simple_rpc_decoded(state: amqp_connection_state_t,
                                   channel: amqp_channel_t,
                                   request_id: amqp_method_number_t,
                                   reply_id: amqp_method_number_t,
                                   decoded_request_method: *mut c_void) ->
     *mut c_void;
    pub fn amqp_get_rpc_reply(state: amqp_connection_state_t) ->
     amqp_rpc_reply_t;
    pub fn amqp_login(state: amqp_connection_state_t, vhost: *c_schar,
                      channel_max: c_int, frame_max: c_int, heartbeat: c_int,
                      sasl_method: amqp_sasl_method_enum, ...) ->
     amqp_rpc_reply_t;
    pub fn amqp_login_with_properties(state: amqp_connection_state_t,
                                      vhost: *c_schar, channel_max: c_int,
                                      frame_max: c_int, heartbeat: c_int,
                                      properties: *amqp_table_t,
                                      sasl_method: amqp_sasl_method_enum, ...)
     -> amqp_rpc_reply_t;
    pub fn amqp_basic_publish(state: amqp_connection_state_t,
                              channel: amqp_channel_t, exchange: amqp_bytes_t,
                              routing_key: amqp_bytes_t,
                              mandatory: amqp_boolean_t,
                              immediate: amqp_boolean_t,
                              properties: *Struct_amqp_basic_properties_t_,
                              body: amqp_bytes_t) -> c_int;
    pub fn amqp_channel_close(state: amqp_connection_state_t,
                              channel: amqp_channel_t, code: c_int) ->
     amqp_rpc_reply_t;
    pub fn amqp_connection_close(state: amqp_connection_state_t, code: c_int)
     -> amqp_rpc_reply_t;
    pub fn amqp_basic_ack(state: amqp_connection_state_t,
                          channel: amqp_channel_t, delivery_tag: uint64_t,
                          multiple: amqp_boolean_t) -> c_int;
    pub fn amqp_basic_get(state: amqp_connection_state_t,
                          channel: amqp_channel_t, queue: amqp_bytes_t,
                          no_ack: amqp_boolean_t) -> amqp_rpc_reply_t;
    pub fn amqp_basic_reject(state: amqp_connection_state_t,
                             channel: amqp_channel_t, delivery_tag: uint64_t,
                             requeue: amqp_boolean_t) -> c_int;
    pub fn amqp_basic_nack(state: amqp_connection_state_t,
                           channel: amqp_channel_t, delivery_tag: uint64_t,
                           multiple: amqp_boolean_t, requeue: amqp_boolean_t)
     -> c_int;
    pub fn amqp_data_in_buffer(state: amqp_connection_state_t) ->
     amqp_boolean_t;
    pub fn amqp_error_string(err: c_int) -> *mut c_schar;
    pub fn amqp_error_string2(err: c_int) -> *c_schar;
    pub fn amqp_decode_table(encoded: amqp_bytes_t, pool: *mut amqp_pool_t,
                             output: *mut amqp_table_t, offset: *mut size_t)
     -> c_int;
    pub fn amqp_encode_table(encoded: amqp_bytes_t, input: *mut amqp_table_t,
                             offset: *mut size_t) -> c_int;
    pub fn amqp_table_clone(original: *mut amqp_table_t,
                            clone: *mut amqp_table_t, pool: *mut amqp_pool_t)
     -> c_int;
    pub fn amqp_read_message(state: amqp_connection_state_t,
                             channel: amqp_channel_t,
                             message: *mut amqp_message_t, flags: c_int) ->
     amqp_rpc_reply_t;
    pub fn amqp_destroy_message(message: *mut amqp_message_t);
    pub fn amqp_consume_message(state: amqp_connection_state_t,
                                envelope: *mut amqp_envelope_t,
                                timeout: *mut Struct_timeval, flags: c_int) ->
     amqp_rpc_reply_t;
    pub fn amqp_destroy_envelope(envelope: *mut amqp_envelope_t);
    pub fn amqp_default_connection_info(parsed:
                                            *mut Struct_amqp_connection_info);
    pub fn amqp_parse_url(url: *mut c_schar,
                          parsed: *mut Struct_amqp_connection_info) -> c_int;
    pub fn amqp_socket_open(_self: *mut amqp_socket_t, host: *c_schar,
                            port: c_int) -> c_int;
    pub fn amqp_socket_open_noblock(_self: *mut amqp_socket_t, host: *c_schar,
                                    port: c_int, timeout: *mut Struct_timeval)
     -> c_int;
    pub fn amqp_socket_get_sockfd(_self: *mut amqp_socket_t) -> c_int;
    pub fn amqp_get_socket(state: amqp_connection_state_t) ->
     *mut amqp_socket_t;
    pub fn amqp_get_server_properties(state: amqp_connection_state_t) ->
     *mut amqp_table_t;
    pub fn amqp_hostcheck(match_pattern: *c_schar, hostname: *c_schar) ->
     c_int;
    pub fn amqp_os_error_string(err: c_int) -> *mut c_schar;
    pub fn amqp_os_socket_error() -> c_int;
    pub fn amqp_os_socket_close(sockfd: c_int) -> c_int;
    pub fn amqp_set_socket(state: amqp_connection_state_t,
                           socket: *mut amqp_socket_t);
    pub fn amqp_socket_writev(_self: *mut amqp_socket_t,
                              iov: *mut Struct_iovec, iovcnt: c_int) ->
     ssize_t;
    pub fn amqp_socket_send(_self: *mut amqp_socket_t, buf: *c_void,
                            len: size_t) -> ssize_t;
    pub fn amqp_socket_recv(_self: *mut amqp_socket_t, buf: *mut c_void,
                            len: size_t, flags: c_int) -> ssize_t;
    pub fn amqp_socket_close(_self: *mut amqp_socket_t) -> c_int;
    pub fn amqp_socket_delete(_self: *mut amqp_socket_t);
    pub fn amqp_open_socket_noblock(hostname: *c_schar, portnumber: c_int,
                                    timeout: *mut Struct_timeval) -> c_int;
    pub fn amqp_queue_frame(state: amqp_connection_state_t,
                            frame: *mut amqp_frame_t) -> c_int;
    pub fn amqp_put_back_frame(state: amqp_connection_state_t,
                               frame: *mut amqp_frame_t) -> c_int;
    pub fn amqp_simple_wait_frame_on_channel(state: amqp_connection_state_t,
                                             channel: amqp_channel_t,
                                             decoded_frame: *mut amqp_frame_t)
     -> c_int;
    pub fn amqp_get_monotonic_timestamp() -> uint64_t;
    pub fn amqp_timer_update(timer: *mut amqp_timer_t,
                             timeout: *mut Struct_timeval) -> c_int;
    pub fn amqp_get_or_create_channel_pool(connection:
                                               amqp_connection_state_t,
                                           channel: amqp_channel_t) ->
     *mut amqp_pool_t;
    pub fn amqp_get_channel_pool(state: amqp_connection_state_t,
                                 channel: amqp_channel_t) -> *mut amqp_pool_t;
    pub fn amqp_try_recv(state: amqp_connection_state_t,
                         current_time: uint64_t) -> c_int;
    pub fn amqp_abort(fmt: *c_schar, ...);
    pub fn amqp_ssl_socket_new(state: amqp_connection_state_t) ->
     *mut amqp_socket_t;
    pub fn amqp_ssl_socket_set_cacert(_self: *mut amqp_socket_t,
                                      cacert: *c_schar) -> c_int;
    pub fn amqp_ssl_socket_set_key(_self: *mut amqp_socket_t, cert: *c_schar,
                                   key: *c_schar) -> c_int;
    pub fn amqp_ssl_socket_set_key_buffer(_self: *mut amqp_socket_t,
                                          cert: *c_schar, key: *c_void,
                                          n: size_t) -> c_int;
    pub fn amqp_ssl_socket_set_verify(_self: *mut amqp_socket_t,
                                      verify: amqp_boolean_t);
    pub fn amqp_set_initialize_ssl_library(do_initialize: amqp_boolean_t);
    pub fn amqp_tcp_socket_new(state: amqp_connection_state_t) ->
     *mut amqp_socket_t;
    pub fn amqp_tcp_socket_set_sockfd(_self: *mut amqp_socket_t,
                                      sockfd: c_int);
}
